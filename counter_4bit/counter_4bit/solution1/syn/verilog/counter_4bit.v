// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="counter_4bit,hls_ip_2015_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.877000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8,HLS_SYN_LUT=22}" *)

module counter_4bit (
        clk,
        pe,
        ud,
        bd,
        p,
        q,
        ap_rst
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;

input   clk;
input   pe;
input   ud;
input   bd;
input  [3:0] p;
output  [3:0] q;
input   ap_rst;

reg[3:0] q;
reg   [3:0] count;
wire    stg_14_counter_4bit_process_fu_68_pe;
wire    stg_14_counter_4bit_process_fu_68_ud;
wire    stg_14_counter_4bit_process_fu_68_bd;
wire   [3:0] stg_14_counter_4bit_process_fu_68_p;
wire   [3:0] stg_14_counter_4bit_process_fu_68_q;
wire    stg_14_counter_4bit_process_fu_68_q_ap_vld;
wire   [3:0] stg_14_counter_4bit_process_fu_68_count_i;
wire   [3:0] stg_14_counter_4bit_process_fu_68_count_o;
wire    stg_14_counter_4bit_process_fu_68_count_o_ap_vld;
wire   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_36;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_47;


counter_4bit_process stg_14_counter_4bit_process_fu_68(
    .ap_clk( clk ),
    .ap_rst( ap_rst ),
    .pe( stg_14_counter_4bit_process_fu_68_pe ),
    .ud( stg_14_counter_4bit_process_fu_68_ud ),
    .bd( stg_14_counter_4bit_process_fu_68_bd ),
    .p( stg_14_counter_4bit_process_fu_68_p ),
    .q( stg_14_counter_4bit_process_fu_68_q ),
    .q_ap_vld( stg_14_counter_4bit_process_fu_68_q_ap_vld ),
    .count_i( stg_14_counter_4bit_process_fu_68_count_i ),
    .count_o( stg_14_counter_4bit_process_fu_68_count_o ),
    .count_o_ap_vld( stg_14_counter_4bit_process_fu_68_count_o_ap_vld )
);



always @ (posedge clk) begin : ap_ret_count
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        count <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == stg_14_counter_4bit_process_fu_68_count_o_ap_vld)) begin
        count <= stg_14_counter_4bit_process_fu_68_count_o;
    end
end

always @ (posedge clk) begin : ap_ret_q
    if ((ap_const_logic_1 == stg_14_counter_4bit_process_fu_68_q_ap_vld)) begin
        q <= stg_14_counter_4bit_process_fu_68_q;
    end
end

always @ (ap_sig_bdd_36) begin
    if (ap_sig_bdd_36) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_47) begin
    if (ap_sig_bdd_47) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

assign ap_CS_fsm = ap_const_lv3_0;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_36 = (ap_CS_fsm[ap_const_lv32_1] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_47 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign stg_14_counter_4bit_process_fu_68_bd = bd;

assign stg_14_counter_4bit_process_fu_68_count_i = count;

assign stg_14_counter_4bit_process_fu_68_p = p;

assign stg_14_counter_4bit_process_fu_68_pe = pe;

assign stg_14_counter_4bit_process_fu_68_ud = ud;


endmodule //counter_4bit

