-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity counter_4bit is
port (
    clk : IN STD_LOGIC;
    pe : IN STD_LOGIC;
    ud : IN STD_LOGIC;
    bd : IN STD_LOGIC;
    p : IN STD_LOGIC_VECTOR (3 downto 0);
    q : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_rst : IN STD_LOGIC );
end;


architecture behav of counter_4bit is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "counter_4bit,hls_ip_2015_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.877000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8,HLS_SYN_LUT=22}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal count : STD_LOGIC_VECTOR (3 downto 0);
    signal stg_14_counter_4bit_process_fu_68_pe : STD_LOGIC;
    signal stg_14_counter_4bit_process_fu_68_ud : STD_LOGIC;
    signal stg_14_counter_4bit_process_fu_68_bd : STD_LOGIC;
    signal stg_14_counter_4bit_process_fu_68_p : STD_LOGIC_VECTOR (3 downto 0);
    signal stg_14_counter_4bit_process_fu_68_q : STD_LOGIC_VECTOR (3 downto 0);
    signal stg_14_counter_4bit_process_fu_68_q_ap_vld : STD_LOGIC;
    signal stg_14_counter_4bit_process_fu_68_count_i : STD_LOGIC_VECTOR (3 downto 0);
    signal stg_14_counter_4bit_process_fu_68_count_o : STD_LOGIC_VECTOR (3 downto 0);
    signal stg_14_counter_4bit_process_fu_68_count_o_ap_vld : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_36 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_47 : BOOLEAN;

    component counter_4bit_process IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        pe : IN STD_LOGIC;
        ud : IN STD_LOGIC;
        bd : IN STD_LOGIC;
        p : IN STD_LOGIC_VECTOR (3 downto 0);
        q : OUT STD_LOGIC_VECTOR (3 downto 0);
        q_ap_vld : OUT STD_LOGIC;
        count_i : IN STD_LOGIC_VECTOR (3 downto 0);
        count_o : OUT STD_LOGIC_VECTOR (3 downto 0);
        count_o_ap_vld : OUT STD_LOGIC );
    end component;



begin
    stg_14_counter_4bit_process_fu_68 : component counter_4bit_process
    port map (
        ap_clk => clk,
        ap_rst => ap_rst,
        pe => stg_14_counter_4bit_process_fu_68_pe,
        ud => stg_14_counter_4bit_process_fu_68_ud,
        bd => stg_14_counter_4bit_process_fu_68_bd,
        p => stg_14_counter_4bit_process_fu_68_p,
        q => stg_14_counter_4bit_process_fu_68_q,
        q_ap_vld => stg_14_counter_4bit_process_fu_68_q_ap_vld,
        count_i => stg_14_counter_4bit_process_fu_68_count_i,
        count_o => stg_14_counter_4bit_process_fu_68_count_o,
        count_o_ap_vld => stg_14_counter_4bit_process_fu_68_count_o_ap_vld);





    -- count assign process. --
    count_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                count <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = stg_14_counter_4bit_process_fu_68_count_o_ap_vld)) then 
                count <= stg_14_counter_4bit_process_fu_68_count_o;
            end if; 
        end if;
    end process;


    -- q assign process. --
    q_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = stg_14_counter_4bit_process_fu_68_q_ap_vld)) then 
                q <= stg_14_counter_4bit_process_fu_68_q;
            end if; 
        end if;
    end process;

    ap_CS_fsm <= ap_const_lv3_0;

    -- ap_sig_bdd_36 assign process. --
    ap_sig_bdd_36_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_36 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_47 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_36)
    begin
        if (ap_sig_bdd_36) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_47)
    begin
        if (ap_sig_bdd_47) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    stg_14_counter_4bit_process_fu_68_bd <= bd;
    stg_14_counter_4bit_process_fu_68_count_i <= count;
    stg_14_counter_4bit_process_fu_68_p <= p;
    stg_14_counter_4bit_process_fu_68_pe <= pe;
    stg_14_counter_4bit_process_fu_68_ud <= ud;
end behav;
