// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "counter_4bit.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic counter_4bit::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic counter_4bit::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> counter_4bit::ap_const_lv32_1 = "1";
const sc_lv<1> counter_4bit::ap_const_lv1_1 = "1";
const sc_lv<4> counter_4bit::ap_const_lv4_0 = "0000";
const sc_lv<32> counter_4bit::ap_const_lv32_2 = "10";
const sc_lv<3> counter_4bit::ap_const_lv3_0 = "000";

counter_4bit::counter_4bit(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stg_14_counter_4bit_process_fu_68 = new counter_4bit_process("stg_14_counter_4bit_process_fu_68");
    stg_14_counter_4bit_process_fu_68->ap_clk(clk);
    stg_14_counter_4bit_process_fu_68->ap_rst(ap_rst);
    stg_14_counter_4bit_process_fu_68->pe(stg_14_counter_4bit_process_fu_68_pe);
    stg_14_counter_4bit_process_fu_68->ud(stg_14_counter_4bit_process_fu_68_ud);
    stg_14_counter_4bit_process_fu_68->bd(stg_14_counter_4bit_process_fu_68_bd);
    stg_14_counter_4bit_process_fu_68->p(stg_14_counter_4bit_process_fu_68_p);
    stg_14_counter_4bit_process_fu_68->q(stg_14_counter_4bit_process_fu_68_q);
    stg_14_counter_4bit_process_fu_68->q_ap_vld(stg_14_counter_4bit_process_fu_68_q_ap_vld);
    stg_14_counter_4bit_process_fu_68->count_i(stg_14_counter_4bit_process_fu_68_count_i);
    stg_14_counter_4bit_process_fu_68->count_o(stg_14_counter_4bit_process_fu_68_count_o);
    stg_14_counter_4bit_process_fu_68->count_o_ap_vld(stg_14_counter_4bit_process_fu_68_count_o_ap_vld);

    SC_METHOD(thread_count);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_q);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_sig_bdd_36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_36 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_stg_14_counter_4bit_process_fu_68_bd);
    sensitive << ( bd );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_stg_14_counter_4bit_process_fu_68_count_i);
    sensitive << ( count );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_stg_14_counter_4bit_process_fu_68_p);
    sensitive << ( p );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_stg_14_counter_4bit_process_fu_68_pe);
    sensitive << ( pe );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_stg_14_counter_4bit_process_fu_68_ud);
    sensitive << ( ud );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "counter_4bit_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, pe, "(port)pe");
    sc_trace(mVcdFile, ud, "(port)ud");
    sc_trace(mVcdFile, bd, "(port)bd");
    sc_trace(mVcdFile, p, "(port)p");
    sc_trace(mVcdFile, q, "(port)q");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, count, "count");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_pe, "stg_14_counter_4bit_process_fu_68_pe");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_ud, "stg_14_counter_4bit_process_fu_68_ud");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_bd, "stg_14_counter_4bit_process_fu_68_bd");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_p, "stg_14_counter_4bit_process_fu_68_p");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_q, "stg_14_counter_4bit_process_fu_68_q");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_q_ap_vld, "stg_14_counter_4bit_process_fu_68_q_ap_vld");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_count_i, "stg_14_counter_4bit_process_fu_68_count_i");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_count_o, "stg_14_counter_4bit_process_fu_68_count_o");
    sc_trace(mVcdFile, stg_14_counter_4bit_process_fu_68_count_o_ap_vld, "stg_14_counter_4bit_process_fu_68_count_o_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_36, "ap_sig_bdd_36");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_47, "ap_sig_bdd_47");
#endif

    }
    mHdltvinHandle.open("counter_4bit.hdltvin.dat");
    mHdltvoutHandle.open("counter_4bit.hdltvout.dat");
}

counter_4bit::~counter_4bit() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stg_14_counter_4bit_process_fu_68;
}

void counter_4bit::thread_count() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        count = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, stg_14_counter_4bit_process_fu_68_count_o_ap_vld.read())) {
        count = stg_14_counter_4bit_process_fu_68_count_o.read();
    }
}

void counter_4bit::thread_q() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stg_14_counter_4bit_process_fu_68_q_ap_vld.read())) {
        q = stg_14_counter_4bit_process_fu_68_q.read();
    }
}

void counter_4bit::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv3_0;
}

void counter_4bit::thread_ap_sig_bdd_36() {
    ap_sig_bdd_36 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(1, 1), ap_const_lv1_1);
}

void counter_4bit::thread_ap_sig_bdd_47() {
    ap_sig_bdd_47 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void counter_4bit::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_36.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void counter_4bit::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_47.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void counter_4bit::thread_stg_14_counter_4bit_process_fu_68_bd() {
    stg_14_counter_4bit_process_fu_68_bd = bd.read();
}

void counter_4bit::thread_stg_14_counter_4bit_process_fu_68_count_i() {
    stg_14_counter_4bit_process_fu_68_count_i = count.read();
}

void counter_4bit::thread_stg_14_counter_4bit_process_fu_68_p() {
    stg_14_counter_4bit_process_fu_68_p = p.read();
}

void counter_4bit::thread_stg_14_counter_4bit_process_fu_68_pe() {
    stg_14_counter_4bit_process_fu_68_pe = pe.read();
}

void counter_4bit::thread_stg_14_counter_4bit_process_fu_68_ud() {
    stg_14_counter_4bit_process_fu_68_ud = ud.read();
}

void counter_4bit::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"pe\" :  \"" << pe.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ud\" :  \"" << ud.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bd\" :  \"" << bd.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p\" :  \"" << p.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"q\" :  \"" << q.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

