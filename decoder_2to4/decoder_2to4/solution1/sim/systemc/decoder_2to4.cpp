// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "decoder_2to4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<1> decoder_2to4::ap_const_lv1_0 = "0";
const sc_logic decoder_2to4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic decoder_2to4::ap_const_logic_0 = sc_dt::Log_0;

decoder_2to4::decoder_2to4(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stg_7_decoder_2to4_do_decode_fu_34 = new decoder_2to4_do_decode("stg_7_decoder_2to4_do_decode_fu_34");
    stg_7_decoder_2to4_do_decode_fu_34->din(stg_7_decoder_2to4_do_decode_fu_34_din);
    stg_7_decoder_2to4_do_decode_fu_34->dout(stg_7_decoder_2to4_do_decode_fu_34_dout);
    stg_7_decoder_2to4_do_decode_fu_34->dout_ap_vld(stg_7_decoder_2to4_do_decode_fu_34_dout_ap_vld);

    SC_METHOD(thread_decoder_2to4_ssdm_thread_M_s_load_fu_42_p1);

    SC_METHOD(thread_dout);
    sensitive << ( stg_7_decoder_2to4_do_decode_fu_34_dout );
    sensitive << ( stg_7_decoder_2to4_do_decode_fu_34_dout_ap_vld );

    SC_METHOD(thread_stg_7_decoder_2to4_do_decode_fu_34_din);
    sensitive << ( din );
    sensitive << ( decoder_2to4_ssdm_thread_M_s_load_fu_42_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_sc_inter_clock.posedge_event() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "decoder_2to4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, din, "(port)din");
    sc_trace(mVcdFile, dout, "(port)dout");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, stg_7_decoder_2to4_do_decode_fu_34_din, "stg_7_decoder_2to4_do_decode_fu_34_din");
    sc_trace(mVcdFile, stg_7_decoder_2to4_do_decode_fu_34_dout, "stg_7_decoder_2to4_do_decode_fu_34_dout");
    sc_trace(mVcdFile, stg_7_decoder_2to4_do_decode_fu_34_dout_ap_vld, "stg_7_decoder_2to4_do_decode_fu_34_dout_ap_vld");
    sc_trace(mVcdFile, decoder_2to4_ssdm_thread_M_s_load_fu_42_p1, "decoder_2to4_ssdm_thread_M_s_load_fu_42_p1");
#endif

    }
    mHdltvinHandle.open("decoder_2to4.hdltvin.dat");
    mHdltvoutHandle.open("decoder_2to4.hdltvout.dat");
}

decoder_2to4::~decoder_2to4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stg_7_decoder_2to4_do_decode_fu_34;
}

void decoder_2to4::thread_decoder_2to4_ssdm_thread_M_s_load_fu_42_p1() {
    decoder_2to4_ssdm_thread_M_s_load_fu_42_p1 = ap_const_lv1_0;
}

void decoder_2to4::thread_dout() {
    dout = stg_7_decoder_2to4_do_decode_fu_34_dout.read();
}

void decoder_2to4::thread_stg_7_decoder_2to4_do_decode_fu_34_din() {
    stg_7_decoder_2to4_do_decode_fu_34_din = din.read();
}

void decoder_2to4::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"din\" :  \"" << din.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"dout\" :  \"" << dout.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

