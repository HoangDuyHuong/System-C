// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "FullSubtractor_process_sub.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool FullSubtractor_process_sub::ap_true = true;
const sc_logic FullSubtractor_process_sub::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic FullSubtractor_process_sub::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> FullSubtractor_process_sub::ap_const_lv1_1 = "1";

FullSubtractor_process_sub::FullSubtractor_process_sub(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_Bout);
    sensitive << ( tmp_3_fu_101_p2 );
    sensitive << ( tmp_5_fu_113_p2 );

    SC_METHOD(thread_Bout_ap_vld);

    SC_METHOD(thread_D);
    sensitive << ( tmp1_fu_82_p2 );
    sensitive << ( v_fu_88_p1 );

    SC_METHOD(thread_D_ap_vld);

    SC_METHOD(thread_tmp1_fu_82_p0);
    sensitive << ( B );

    SC_METHOD(thread_tmp1_fu_82_p1);
    sensitive << ( Bin );

    SC_METHOD(thread_tmp1_fu_82_p2);
    sensitive << ( tmp1_fu_82_p0 );
    sensitive << ( tmp1_fu_82_p1 );

    SC_METHOD(thread_tmp_2_fu_95_p0);
    sensitive << ( A );

    SC_METHOD(thread_tmp_2_fu_95_p2);
    sensitive << ( tmp_2_fu_95_p0 );

    SC_METHOD(thread_tmp_3_fu_101_p0);
    sensitive << ( B );

    SC_METHOD(thread_tmp_3_fu_101_p2);
    sensitive << ( tmp_3_fu_101_p0 );
    sensitive << ( tmp_2_fu_95_p2 );

    SC_METHOD(thread_tmp_4_fu_107_p0);
    sensitive << ( B );

    SC_METHOD(thread_tmp_4_fu_107_p2);
    sensitive << ( tmp_2_fu_95_p2 );
    sensitive << ( tmp_4_fu_107_p0 );

    SC_METHOD(thread_tmp_5_fu_113_p0);
    sensitive << ( Bin );

    SC_METHOD(thread_tmp_5_fu_113_p2);
    sensitive << ( tmp_5_fu_113_p0 );
    sensitive << ( tmp_4_fu_107_p2 );

    SC_METHOD(thread_v_fu_88_p1);
    sensitive << ( A );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FullSubtractor_process_sub_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, A, "(port)A");
    sc_trace(mVcdFile, B, "(port)B");
    sc_trace(mVcdFile, Bin, "(port)Bin");
    sc_trace(mVcdFile, D, "(port)D");
    sc_trace(mVcdFile, D_ap_vld, "(port)D_ap_vld");
    sc_trace(mVcdFile, Bout, "(port)Bout");
    sc_trace(mVcdFile, Bout_ap_vld, "(port)Bout_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp1_fu_82_p0, "tmp1_fu_82_p0");
    sc_trace(mVcdFile, tmp1_fu_82_p1, "tmp1_fu_82_p1");
    sc_trace(mVcdFile, tmp1_fu_82_p2, "tmp1_fu_82_p2");
    sc_trace(mVcdFile, v_fu_88_p1, "v_fu_88_p1");
    sc_trace(mVcdFile, tmp_2_fu_95_p0, "tmp_2_fu_95_p0");
    sc_trace(mVcdFile, tmp_3_fu_101_p0, "tmp_3_fu_101_p0");
    sc_trace(mVcdFile, tmp_2_fu_95_p2, "tmp_2_fu_95_p2");
    sc_trace(mVcdFile, tmp_4_fu_107_p0, "tmp_4_fu_107_p0");
    sc_trace(mVcdFile, tmp_5_fu_113_p0, "tmp_5_fu_113_p0");
    sc_trace(mVcdFile, tmp_4_fu_107_p2, "tmp_4_fu_107_p2");
    sc_trace(mVcdFile, tmp_3_fu_101_p2, "tmp_3_fu_101_p2");
    sc_trace(mVcdFile, tmp_5_fu_113_p2, "tmp_5_fu_113_p2");
#endif

    }
}

FullSubtractor_process_sub::~FullSubtractor_process_sub() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void FullSubtractor_process_sub::thread_Bout() {
    Bout =  (sc_logic) ((tmp_3_fu_101_p2.read() | tmp_5_fu_113_p2.read()))[0];
}

void FullSubtractor_process_sub::thread_Bout_ap_vld() {
    if (esl_seteq<1,1,1>(ap_true, ap_true)) {
        Bout_ap_vld = ap_const_logic_1;
    } else {
        Bout_ap_vld = ap_const_logic_0;
    }
}

void FullSubtractor_process_sub::thread_D() {
    D =  (sc_logic) ((tmp1_fu_82_p2.read() ^ v_fu_88_p1.read()))[0];
}

void FullSubtractor_process_sub::thread_D_ap_vld() {
    if (esl_seteq<1,1,1>(ap_true, ap_true)) {
        D_ap_vld = ap_const_logic_1;
    } else {
        D_ap_vld = ap_const_logic_0;
    }
}

void FullSubtractor_process_sub::thread_tmp1_fu_82_p0() {
    tmp1_fu_82_p0 =  (sc_lv<1>) (B.read());
}

void FullSubtractor_process_sub::thread_tmp1_fu_82_p1() {
    tmp1_fu_82_p1 =  (sc_lv<1>) (Bin.read());
}

void FullSubtractor_process_sub::thread_tmp1_fu_82_p2() {
    tmp1_fu_82_p2 = (tmp1_fu_82_p0.read() ^ tmp1_fu_82_p1.read());
}

void FullSubtractor_process_sub::thread_tmp_2_fu_95_p0() {
    tmp_2_fu_95_p0 =  (sc_lv<1>) (A.read());
}

void FullSubtractor_process_sub::thread_tmp_2_fu_95_p2() {
    tmp_2_fu_95_p2 = (tmp_2_fu_95_p0.read() ^ ap_const_lv1_1);
}

void FullSubtractor_process_sub::thread_tmp_3_fu_101_p0() {
    tmp_3_fu_101_p0 =  (sc_lv<1>) (B.read());
}

void FullSubtractor_process_sub::thread_tmp_3_fu_101_p2() {
    tmp_3_fu_101_p2 = (tmp_3_fu_101_p0.read() & tmp_2_fu_95_p2.read());
}

void FullSubtractor_process_sub::thread_tmp_4_fu_107_p0() {
    tmp_4_fu_107_p0 =  (sc_lv<1>) (B.read());
}

void FullSubtractor_process_sub::thread_tmp_4_fu_107_p2() {
    tmp_4_fu_107_p2 = (tmp_4_fu_107_p0.read() | tmp_2_fu_95_p2.read());
}

void FullSubtractor_process_sub::thread_tmp_5_fu_113_p0() {
    tmp_5_fu_113_p0 =  (sc_lv<1>) (Bin.read());
}

void FullSubtractor_process_sub::thread_tmp_5_fu_113_p2() {
    tmp_5_fu_113_p2 = (tmp_5_fu_113_p0.read() & tmp_4_fu_107_p2.read());
}

void FullSubtractor_process_sub::thread_v_fu_88_p1() {
    v_fu_88_p1 =  (sc_lv<1>) (A.read());
}

}

