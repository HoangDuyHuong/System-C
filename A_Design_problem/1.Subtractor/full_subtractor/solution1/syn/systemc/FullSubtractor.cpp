// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "FullSubtractor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<1> FullSubtractor::ap_const_lv1_0 = "0";
const sc_logic FullSubtractor::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic FullSubtractor::ap_const_logic_0 = sc_dt::Log_0;

FullSubtractor::FullSubtractor(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stg_10_FullSubtractor_process_sub_fu_44 = new FullSubtractor_process_sub("stg_10_FullSubtractor_process_sub_fu_44");
    stg_10_FullSubtractor_process_sub_fu_44->A(stg_10_FullSubtractor_process_sub_fu_44_A);
    stg_10_FullSubtractor_process_sub_fu_44->B(stg_10_FullSubtractor_process_sub_fu_44_B);
    stg_10_FullSubtractor_process_sub_fu_44->Bin(stg_10_FullSubtractor_process_sub_fu_44_Bin);
    stg_10_FullSubtractor_process_sub_fu_44->D(stg_10_FullSubtractor_process_sub_fu_44_D);
    stg_10_FullSubtractor_process_sub_fu_44->D_ap_vld(stg_10_FullSubtractor_process_sub_fu_44_D_ap_vld);
    stg_10_FullSubtractor_process_sub_fu_44->Bout(stg_10_FullSubtractor_process_sub_fu_44_Bout);
    stg_10_FullSubtractor_process_sub_fu_44->Bout_ap_vld(stg_10_FullSubtractor_process_sub_fu_44_Bout_ap_vld);

    SC_METHOD(thread_Bout);
    sensitive << ( stg_10_FullSubtractor_process_sub_fu_44_Bout );
    sensitive << ( stg_10_FullSubtractor_process_sub_fu_44_Bout_ap_vld );

    SC_METHOD(thread_D);
    sensitive << ( stg_10_FullSubtractor_process_sub_fu_44_D );
    sensitive << ( stg_10_FullSubtractor_process_sub_fu_44_D_ap_vld );

    SC_METHOD(thread_FullSubtractor_ssdm_thread_s_load_fu_58_p1);

    SC_METHOD(thread_stg_10_FullSubtractor_process_sub_fu_44_A);
    sensitive << ( A );
    sensitive << ( FullSubtractor_ssdm_thread_s_load_fu_58_p1 );

    SC_METHOD(thread_stg_10_FullSubtractor_process_sub_fu_44_B);
    sensitive << ( B );
    sensitive << ( FullSubtractor_ssdm_thread_s_load_fu_58_p1 );

    SC_METHOD(thread_stg_10_FullSubtractor_process_sub_fu_44_Bin);
    sensitive << ( Bin );
    sensitive << ( FullSubtractor_ssdm_thread_s_load_fu_58_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_sc_inter_clock.posedge_event() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FullSubtractor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, A, "(port)A");
    sc_trace(mVcdFile, B, "(port)B");
    sc_trace(mVcdFile, Bin, "(port)Bin");
    sc_trace(mVcdFile, D, "(port)D");
    sc_trace(mVcdFile, Bout, "(port)Bout");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_A, "stg_10_FullSubtractor_process_sub_fu_44_A");
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_B, "stg_10_FullSubtractor_process_sub_fu_44_B");
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_Bin, "stg_10_FullSubtractor_process_sub_fu_44_Bin");
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_D, "stg_10_FullSubtractor_process_sub_fu_44_D");
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_D_ap_vld, "stg_10_FullSubtractor_process_sub_fu_44_D_ap_vld");
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_Bout, "stg_10_FullSubtractor_process_sub_fu_44_Bout");
    sc_trace(mVcdFile, stg_10_FullSubtractor_process_sub_fu_44_Bout_ap_vld, "stg_10_FullSubtractor_process_sub_fu_44_Bout_ap_vld");
    sc_trace(mVcdFile, FullSubtractor_ssdm_thread_s_load_fu_58_p1, "FullSubtractor_ssdm_thread_s_load_fu_58_p1");
#endif

    }
    mHdltvinHandle.open("FullSubtractor.hdltvin.dat");
    mHdltvoutHandle.open("FullSubtractor.hdltvout.dat");
}

FullSubtractor::~FullSubtractor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stg_10_FullSubtractor_process_sub_fu_44;
}

void FullSubtractor::thread_Bout() {
    Bout = stg_10_FullSubtractor_process_sub_fu_44_Bout.read();
}

void FullSubtractor::thread_D() {
    D = stg_10_FullSubtractor_process_sub_fu_44_D.read();
}

void FullSubtractor::thread_FullSubtractor_ssdm_thread_s_load_fu_58_p1() {
    FullSubtractor_ssdm_thread_s_load_fu_58_p1 = ap_const_lv1_0;
}

void FullSubtractor::thread_stg_10_FullSubtractor_process_sub_fu_44_A() {
    stg_10_FullSubtractor_process_sub_fu_44_A = A.read();
}

void FullSubtractor::thread_stg_10_FullSubtractor_process_sub_fu_44_B() {
    stg_10_FullSubtractor_process_sub_fu_44_B = B.read();
}

void FullSubtractor::thread_stg_10_FullSubtractor_process_sub_fu_44_Bin() {
    stg_10_FullSubtractor_process_sub_fu_44_Bin = Bin.read();
}

void FullSubtractor::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"A\" :  \"" << A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B\" :  \"" << B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Bin\" :  \"" << Bin.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"D\" :  \"" << D.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Bout\" :  \"" << Bout.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

