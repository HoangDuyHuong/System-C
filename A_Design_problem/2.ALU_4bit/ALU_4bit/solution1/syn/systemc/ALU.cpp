// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "ALU.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<1> ALU::ap_const_lv1_0 = "0";
const sc_logic ALU::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ALU::ap_const_logic_0 = sc_dt::Log_0;

ALU::ALU(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stg_10_ALU_perform_operation_fu_48 = new ALU_perform_operation("stg_10_ALU_perform_operation_fu_48");
    stg_10_ALU_perform_operation_fu_48->A(stg_10_ALU_perform_operation_fu_48_A);
    stg_10_ALU_perform_operation_fu_48->B(stg_10_ALU_perform_operation_fu_48_B);
    stg_10_ALU_perform_operation_fu_48->op_code(stg_10_ALU_perform_operation_fu_48_op_code);
    stg_10_ALU_perform_operation_fu_48->result(stg_10_ALU_perform_operation_fu_48_result);
    stg_10_ALU_perform_operation_fu_48->result_ap_vld(stg_10_ALU_perform_operation_fu_48_result_ap_vld);
    stg_10_ALU_perform_operation_fu_48->carry_borrow(stg_10_ALU_perform_operation_fu_48_carry_borrow);
    stg_10_ALU_perform_operation_fu_48->carry_borrow_ap_vld(stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld);

    SC_METHOD(thread_ALU_ssdm_thread_M_perform_o_load_fu_62_p1);

    SC_METHOD(thread_carry_borrow);
    sensitive << ( stg_10_ALU_perform_operation_fu_48_carry_borrow );
    sensitive << ( stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld );

    SC_METHOD(thread_result);
    sensitive << ( stg_10_ALU_perform_operation_fu_48_result );
    sensitive << ( stg_10_ALU_perform_operation_fu_48_result_ap_vld );

    SC_METHOD(thread_stg_10_ALU_perform_operation_fu_48_A);
    sensitive << ( A );
    sensitive << ( ALU_ssdm_thread_M_perform_o_load_fu_62_p1 );

    SC_METHOD(thread_stg_10_ALU_perform_operation_fu_48_B);
    sensitive << ( B );
    sensitive << ( ALU_ssdm_thread_M_perform_o_load_fu_62_p1 );

    SC_METHOD(thread_stg_10_ALU_perform_operation_fu_48_op_code);
    sensitive << ( op_code );
    sensitive << ( ALU_ssdm_thread_M_perform_o_load_fu_62_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_sc_inter_clock.posedge_event() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ALU_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, A, "(port)A");
    sc_trace(mVcdFile, B, "(port)B");
    sc_trace(mVcdFile, op_code, "(port)op_code");
    sc_trace(mVcdFile, result, "(port)result");
    sc_trace(mVcdFile, carry_borrow, "(port)carry_borrow");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_A, "stg_10_ALU_perform_operation_fu_48_A");
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_B, "stg_10_ALU_perform_operation_fu_48_B");
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_op_code, "stg_10_ALU_perform_operation_fu_48_op_code");
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_result, "stg_10_ALU_perform_operation_fu_48_result");
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_result_ap_vld, "stg_10_ALU_perform_operation_fu_48_result_ap_vld");
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_carry_borrow, "stg_10_ALU_perform_operation_fu_48_carry_borrow");
    sc_trace(mVcdFile, stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld, "stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld");
    sc_trace(mVcdFile, ALU_ssdm_thread_M_perform_o_load_fu_62_p1, "ALU_ssdm_thread_M_perform_o_load_fu_62_p1");
#endif

    }
    mHdltvinHandle.open("ALU.hdltvin.dat");
    mHdltvoutHandle.open("ALU.hdltvout.dat");
}

ALU::~ALU() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stg_10_ALU_perform_operation_fu_48;
}

void ALU::thread_ALU_ssdm_thread_M_perform_o_load_fu_62_p1() {
    ALU_ssdm_thread_M_perform_o_load_fu_62_p1 = ap_const_lv1_0;
}

void ALU::thread_carry_borrow() {
    carry_borrow = stg_10_ALU_perform_operation_fu_48_carry_borrow.read();
}

void ALU::thread_result() {
    result = stg_10_ALU_perform_operation_fu_48_result.read();
}

void ALU::thread_stg_10_ALU_perform_operation_fu_48_A() {
    stg_10_ALU_perform_operation_fu_48_A = A.read();
}

void ALU::thread_stg_10_ALU_perform_operation_fu_48_B() {
    stg_10_ALU_perform_operation_fu_48_B = B.read();
}

void ALU::thread_stg_10_ALU_perform_operation_fu_48_op_code() {
    stg_10_ALU_perform_operation_fu_48_op_code = op_code.read();
}

void ALU::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"A\" :  \"" << A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B\" :  \"" << B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"op_code\" :  \"" << op_code.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"result\" :  \"" << result.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"carry_borrow\" :  \"" << carry_borrow.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

