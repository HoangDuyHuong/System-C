// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "ALU_perform_operation.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool ALU_perform_operation::ap_true = true;
const sc_lv<3> ALU_perform_operation::ap_const_lv3_7 = "111";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_6 = "110";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_5 = "101";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_4 = "100";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_3 = "11";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_2 = "10";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_1 = "1";
const sc_lv<3> ALU_perform_operation::ap_const_lv3_0 = "000";
const sc_lv<4> ALU_perform_operation::ap_const_lv4_0 = "0000";
const sc_lv<1> ALU_perform_operation::ap_const_lv1_0 = "0";
const sc_logic ALU_perform_operation::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic ALU_perform_operation::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<4> ALU_perform_operation::ap_const_lv4_F = "1111";
const sc_lv<4> ALU_perform_operation::ap_const_lv4_1 = "1";
const sc_lv<32> ALU_perform_operation::ap_const_lv32_4 = "100";

ALU_perform_operation::ALU_perform_operation(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_carry_1_fu_233_p2);
    sensitive << ( A );
    sensitive << ( B );
    sensitive << ( val_V_read_fu_84_p2 );

    SC_METHOD(thread_carry_2_fu_219_p2);
    sensitive << ( A );
    sensitive << ( val_V_read_fu_84_p2 );

    SC_METHOD(thread_carry_3_fu_205_p2);
    sensitive << ( A );
    sensitive << ( val_V_read_fu_84_p2 );

    SC_METHOD(thread_carry_borrow);
    sensitive << ( v_phi_fu_144_p18 );

    SC_METHOD(thread_carry_borrow_ap_vld);

    SC_METHOD(thread_grp_fu_170_p2);
    sensitive << ( A );
    sensitive << ( B );

    SC_METHOD(thread_lhs_V_fu_247_p1);
    sensitive << ( A );

    SC_METHOD(thread_r_V_6_fu_191_p2);
    sensitive << ( A );
    sensitive << ( B );

    SC_METHOD(thread_r_V_7_fu_177_p2);
    sensitive << ( A );
    sensitive << ( B );

    SC_METHOD(thread_r_V_fu_255_p2);
    sensitive << ( rhs_V_fu_251_p1 );
    sensitive << ( lhs_V_fu_247_p1 );

    SC_METHOD(thread_res_V_1_fu_226_p2);
    sensitive << ( A );
    sensitive << ( B );

    SC_METHOD(thread_res_V_2_fu_212_p2);
    sensitive << ( A );

    SC_METHOD(thread_res_V_3_fu_198_p2);
    sensitive << ( A );

    SC_METHOD(thread_res_V_6_fu_184_p2);
    sensitive << ( grp_fu_170_p2 );

    SC_METHOD(thread_res_V_fu_240_p2);
    sensitive << ( A );
    sensitive << ( B );

    SC_METHOD(thread_result);
    sensitive << ( v_V_phi_fu_119_p18 );

    SC_METHOD(thread_result_ap_vld);

    SC_METHOD(thread_rhs_V_fu_251_p1);
    sensitive << ( B );

    SC_METHOD(thread_v_V_phi_fu_119_p18);
    sensitive << ( r_V_7_fu_177_p2 );
    sensitive << ( val_V_read_fu_84_p2 );
    sensitive << ( res_V_6_fu_184_p2 );
    sensitive << ( r_V_6_fu_191_p2 );
    sensitive << ( grp_fu_170_p2 );
    sensitive << ( res_V_3_fu_198_p2 );
    sensitive << ( res_V_2_fu_212_p2 );
    sensitive << ( res_V_1_fu_226_p2 );
    sensitive << ( res_V_fu_240_p2 );

    SC_METHOD(thread_v_phi_fu_144_p18);
    sensitive << ( val_V_read_fu_84_p2 );
    sensitive << ( carry_3_fu_205_p2 );
    sensitive << ( carry_2_fu_219_p2 );
    sensitive << ( carry_1_fu_233_p2 );
    sensitive << ( r_V_fu_255_p2 );

    SC_METHOD(thread_val_V_read_fu_84_p2);
    sensitive << ( op_code );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ALU_perform_operation_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, A, "(port)A");
    sc_trace(mVcdFile, B, "(port)B");
    sc_trace(mVcdFile, op_code, "(port)op_code");
    sc_trace(mVcdFile, result, "(port)result");
    sc_trace(mVcdFile, result_ap_vld, "(port)result_ap_vld");
    sc_trace(mVcdFile, carry_borrow, "(port)carry_borrow");
    sc_trace(mVcdFile, carry_borrow_ap_vld, "(port)carry_borrow_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, r_V_7_fu_177_p2, "r_V_7_fu_177_p2");
    sc_trace(mVcdFile, v_V_phi_fu_119_p18, "v_V_phi_fu_119_p18");
    sc_trace(mVcdFile, val_V_read_fu_84_p2, "val_V_read_fu_84_p2");
    sc_trace(mVcdFile, res_V_6_fu_184_p2, "res_V_6_fu_184_p2");
    sc_trace(mVcdFile, r_V_6_fu_191_p2, "r_V_6_fu_191_p2");
    sc_trace(mVcdFile, grp_fu_170_p2, "grp_fu_170_p2");
    sc_trace(mVcdFile, res_V_3_fu_198_p2, "res_V_3_fu_198_p2");
    sc_trace(mVcdFile, res_V_2_fu_212_p2, "res_V_2_fu_212_p2");
    sc_trace(mVcdFile, res_V_1_fu_226_p2, "res_V_1_fu_226_p2");
    sc_trace(mVcdFile, res_V_fu_240_p2, "res_V_fu_240_p2");
    sc_trace(mVcdFile, v_phi_fu_144_p18, "v_phi_fu_144_p18");
    sc_trace(mVcdFile, carry_3_fu_205_p2, "carry_3_fu_205_p2");
    sc_trace(mVcdFile, carry_2_fu_219_p2, "carry_2_fu_219_p2");
    sc_trace(mVcdFile, carry_1_fu_233_p2, "carry_1_fu_233_p2");
    sc_trace(mVcdFile, rhs_V_fu_251_p1, "rhs_V_fu_251_p1");
    sc_trace(mVcdFile, lhs_V_fu_247_p1, "lhs_V_fu_247_p1");
    sc_trace(mVcdFile, r_V_fu_255_p2, "r_V_fu_255_p2");
#endif

    }
}

ALU_perform_operation::~ALU_perform_operation() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ALU_perform_operation::thread_carry_1_fu_233_p2() {
    carry_1_fu_233_p2 = (!A.read().is_01() || !B.read().is_01())? sc_lv<1>(): (sc_biguint<4>(A.read()) < sc_biguint<4>(B.read()));
}

void ALU_perform_operation::thread_carry_2_fu_219_p2() {
    carry_2_fu_219_p2 = (!A.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(A.read() == ap_const_lv4_F);
}

void ALU_perform_operation::thread_carry_3_fu_205_p2() {
    carry_3_fu_205_p2 = (!A.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(A.read() == ap_const_lv4_0);
}

void ALU_perform_operation::thread_carry_borrow() {
    carry_borrow =  (sc_logic) (v_phi_fu_144_p18.read()[0]);
}

void ALU_perform_operation::thread_carry_borrow_ap_vld() {
    if (esl_seteq<1,1,1>(ap_true, ap_true)) {
        carry_borrow_ap_vld = ap_const_logic_1;
    } else {
        carry_borrow_ap_vld = ap_const_logic_0;
    }
}

void ALU_perform_operation::thread_grp_fu_170_p2() {
    grp_fu_170_p2 = (B.read() & A.read());
}

void ALU_perform_operation::thread_lhs_V_fu_247_p1() {
    lhs_V_fu_247_p1 = esl_zext<5,4>(A.read());
}

void ALU_perform_operation::thread_r_V_6_fu_191_p2() {
    r_V_6_fu_191_p2 = (B.read() | A.read());
}

void ALU_perform_operation::thread_r_V_7_fu_177_p2() {
    r_V_7_fu_177_p2 = (B.read() ^ A.read());
}

void ALU_perform_operation::thread_r_V_fu_255_p2() {
    r_V_fu_255_p2 = (!rhs_V_fu_251_p1.read().is_01() || !lhs_V_fu_247_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(rhs_V_fu_251_p1.read()) + sc_biguint<5>(lhs_V_fu_247_p1.read()));
}

void ALU_perform_operation::thread_res_V_1_fu_226_p2() {
    res_V_1_fu_226_p2 = (!A.read().is_01() || !B.read().is_01())? sc_lv<4>(): (sc_biguint<4>(A.read()) - sc_biguint<4>(B.read()));
}

void ALU_perform_operation::thread_res_V_2_fu_212_p2() {
    res_V_2_fu_212_p2 = (!A.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(A.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void ALU_perform_operation::thread_res_V_3_fu_198_p2() {
    res_V_3_fu_198_p2 = (!A.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(A.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void ALU_perform_operation::thread_res_V_6_fu_184_p2() {
    res_V_6_fu_184_p2 = (grp_fu_170_p2.read() ^ ap_const_lv4_F);
}

void ALU_perform_operation::thread_res_V_fu_240_p2() {
    res_V_fu_240_p2 = (!B.read().is_01() || !A.read().is_01())? sc_lv<4>(): (sc_biguint<4>(B.read()) + sc_biguint<4>(A.read()));
}

void ALU_perform_operation::thread_result() {
    result = v_V_phi_fu_119_p18.read();
}

void ALU_perform_operation::thread_result_ap_vld() {
    if (esl_seteq<1,1,1>(ap_true, ap_true)) {
        result_ap_vld = ap_const_logic_1;
    } else {
        result_ap_vld = ap_const_logic_0;
    }
}

void ALU_perform_operation::thread_rhs_V_fu_251_p1() {
    rhs_V_fu_251_p1 = esl_zext<5,4>(B.read());
}

void ALU_perform_operation::thread_v_V_phi_fu_119_p18() {
    if ((!esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_7) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_6) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_5) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_4) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_3) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_2) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_1) && 
         !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_0))) {
        v_V_phi_fu_119_p18 = ap_const_lv4_0;
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_0)) {
        v_V_phi_fu_119_p18 = res_V_fu_240_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_1)) {
        v_V_phi_fu_119_p18 = res_V_1_fu_226_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_2)) {
        v_V_phi_fu_119_p18 = res_V_2_fu_212_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_3)) {
        v_V_phi_fu_119_p18 = res_V_3_fu_198_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_4)) {
        v_V_phi_fu_119_p18 = grp_fu_170_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_5)) {
        v_V_phi_fu_119_p18 = r_V_6_fu_191_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_6)) {
        v_V_phi_fu_119_p18 = res_V_6_fu_184_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_7)) {
        v_V_phi_fu_119_p18 = r_V_7_fu_177_p2.read();
    } else {
        v_V_phi_fu_119_p18 = "XXXX";
    }
}

void ALU_perform_operation::thread_v_phi_fu_144_p18() {
    if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_0)) {
        v_phi_fu_144_p18 = r_V_fu_255_p2.read().range(4, 4);
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_1)) {
        v_phi_fu_144_p18 = carry_1_fu_233_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_2)) {
        v_phi_fu_144_p18 = carry_2_fu_219_p2.read();
    } else if (esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_3)) {
        v_phi_fu_144_p18 = carry_3_fu_205_p2.read();
    } else if ((esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_7) || 
                esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_6) || 
                esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_5) || 
                esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_4) || 
                (!esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_7) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_6) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_5) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_4) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_3) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_2) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_1) && 
                 !esl_seteq<1,3,3>(val_V_read_fu_84_p2.read(), ap_const_lv3_0)))) {
        v_phi_fu_144_p18 = ap_const_lv1_0;
    } else {
        v_phi_fu_144_p18 =  (sc_lv<1>) ("X");
    }
}

void ALU_perform_operation::thread_val_V_read_fu_84_p2() {
    val_V_read_fu_84_p2 = op_code.read();
}

}

