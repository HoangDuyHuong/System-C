// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _ALU_HH_
#define _ALU_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ALU_perform_operation.h"

namespace ap_rtl {

struct ALU : public sc_module {
    // Port declarations 5
    sc_in< sc_lv<4> > A;
    sc_in< sc_lv<4> > B;
    sc_in< sc_lv<3> > op_code;
    sc_out< sc_lv<4> > result;
    sc_out< sc_logic > carry_borrow;
    // Internal clock declarations for combination SystemC design. 
    sc_clock ap_sc_inter_clock;


    // Module declarations
    ALU(sc_module_name name);
    SC_HAS_PROCESS(ALU);

    ~ALU();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    ALU_perform_operation* stg_10_ALU_perform_operation_fu_48;
    sc_signal< sc_lv<4> > stg_10_ALU_perform_operation_fu_48_A;
    sc_signal< sc_lv<4> > stg_10_ALU_perform_operation_fu_48_B;
    sc_signal< sc_lv<3> > stg_10_ALU_perform_operation_fu_48_op_code;
    sc_signal< sc_lv<4> > stg_10_ALU_perform_operation_fu_48_result;
    sc_signal< sc_logic > stg_10_ALU_perform_operation_fu_48_result_ap_vld;
    sc_signal< sc_logic > stg_10_ALU_perform_operation_fu_48_carry_borrow;
    sc_signal< sc_logic > stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld;
    sc_signal< sc_lv<1> > ALU_ssdm_thread_M_perform_o_load_fu_62_p1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ALU_ssdm_thread_M_perform_o_load_fu_62_p1();
    void thread_carry_borrow();
    void thread_result();
    void thread_stg_10_ALU_perform_operation_fu_48_A();
    void thread_stg_10_ALU_perform_operation_fu_48_B();
    void thread_stg_10_ALU_perform_operation_fu_48_op_code();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
