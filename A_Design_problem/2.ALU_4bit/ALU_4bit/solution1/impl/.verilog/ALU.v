// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ALU,hls_ip_2015_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.975000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=64}" *)

module ALU (
        A,
        B,
        op_code,
        result,
        carry_borrow
);

parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;

input  [3:0] A;
input  [3:0] B;
input  [2:0] op_code;
output  [3:0] result;
output   carry_borrow;

wire   [3:0] stg_10_ALU_perform_operation_fu_48_A;
wire   [3:0] stg_10_ALU_perform_operation_fu_48_B;
wire   [2:0] stg_10_ALU_perform_operation_fu_48_op_code;
wire   [3:0] stg_10_ALU_perform_operation_fu_48_result;
wire    stg_10_ALU_perform_operation_fu_48_result_ap_vld;
wire    stg_10_ALU_perform_operation_fu_48_carry_borrow;
wire    stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld;
wire   [0:0] ALU_ssdm_thread_M_perform_o_load_fu_62_p1;


ALU_perform_operation stg_10_ALU_perform_operation_fu_48(
    .A( stg_10_ALU_perform_operation_fu_48_A ),
    .B( stg_10_ALU_perform_operation_fu_48_B ),
    .op_code( stg_10_ALU_perform_operation_fu_48_op_code ),
    .result( stg_10_ALU_perform_operation_fu_48_result ),
    .result_ap_vld( stg_10_ALU_perform_operation_fu_48_result_ap_vld ),
    .carry_borrow( stg_10_ALU_perform_operation_fu_48_carry_borrow ),
    .carry_borrow_ap_vld( stg_10_ALU_perform_operation_fu_48_carry_borrow_ap_vld )
);



assign ALU_ssdm_thread_M_perform_o_load_fu_62_p1 = ap_const_lv1_0;

assign carry_borrow = stg_10_ALU_perform_operation_fu_48_carry_borrow;

assign result = stg_10_ALU_perform_operation_fu_48_result;

assign stg_10_ALU_perform_operation_fu_48_A = A;

assign stg_10_ALU_perform_operation_fu_48_B = B;

assign stg_10_ALU_perform_operation_fu_48_op_code = op_code;


endmodule //ALU

