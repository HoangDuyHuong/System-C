-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mux_4to1_process_mux is
port (
    in0 : IN STD_LOGIC;
    in1 : IN STD_LOGIC;
    in2 : IN STD_LOGIC;
    in3 : IN STD_LOGIC;
    sel : IN STD_LOGIC_VECTOR (1 downto 0);
    out_r : OUT STD_LOGIC;
    out_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mux_4to1_process_mux is 
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal val_V_read_fu_66_p2 : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- out_r assign process. --
    out_r_assign_proc : process(in0, in1, in2, in3, val_V_read_fu_66_p2)
    begin
        if ((not((val_V_read_fu_66_p2 = ap_const_lv2_3)) and not((val_V_read_fu_66_p2 = ap_const_lv2_2)) and not((val_V_read_fu_66_p2 = ap_const_lv2_1)) and not((val_V_read_fu_66_p2 = ap_const_lv2_0)))) then 
            out_r <= ap_const_logic_0;
        elsif ((val_V_read_fu_66_p2 = ap_const_lv2_0)) then 
            out_r <= in0;
        elsif ((val_V_read_fu_66_p2 = ap_const_lv2_1)) then 
            out_r <= in1;
        elsif ((val_V_read_fu_66_p2 = ap_const_lv2_2)) then 
            out_r <= in2;
        elsif ((val_V_read_fu_66_p2 = ap_const_lv2_3)) then 
            out_r <= in3;
        else 
            out_r <= 'X';
        end if; 
    end process;


    -- out_r_ap_vld assign process. --
    out_r_ap_vld_assign_proc : process(val_V_read_fu_66_p2)
    begin
        if (((val_V_read_fu_66_p2 = ap_const_lv2_3) or (val_V_read_fu_66_p2 = ap_const_lv2_2) or (val_V_read_fu_66_p2 = ap_const_lv2_1) or (val_V_read_fu_66_p2 = ap_const_lv2_0) or (not((val_V_read_fu_66_p2 = ap_const_lv2_3)) and not((val_V_read_fu_66_p2 = ap_const_lv2_2)) and not((val_V_read_fu_66_p2 = ap_const_lv2_1)) and not((val_V_read_fu_66_p2 = ap_const_lv2_0))))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    val_V_read_fu_66_p2 <= sel;
end behav;
