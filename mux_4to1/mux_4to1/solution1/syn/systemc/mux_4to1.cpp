// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "mux_4to1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<1> mux_4to1::ap_const_lv1_0 = "0";
const sc_logic mux_4to1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mux_4to1::ap_const_logic_0 = sc_dt::Log_0;

mux_4to1::mux_4to1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stg_11_mux_4to1_process_mux_fu_50 = new mux_4to1_process_mux("stg_11_mux_4to1_process_mux_fu_50");
    stg_11_mux_4to1_process_mux_fu_50->in0(stg_11_mux_4to1_process_mux_fu_50_in0);
    stg_11_mux_4to1_process_mux_fu_50->in1(stg_11_mux_4to1_process_mux_fu_50_in1);
    stg_11_mux_4to1_process_mux_fu_50->in2(stg_11_mux_4to1_process_mux_fu_50_in2);
    stg_11_mux_4to1_process_mux_fu_50->in3(stg_11_mux_4to1_process_mux_fu_50_in3);
    stg_11_mux_4to1_process_mux_fu_50->sel(stg_11_mux_4to1_process_mux_fu_50_sel);
    stg_11_mux_4to1_process_mux_fu_50->out_r(stg_11_mux_4to1_process_mux_fu_50_out_r);
    stg_11_mux_4to1_process_mux_fu_50->out_r_ap_vld(stg_11_mux_4to1_process_mux_fu_50_out_r_ap_vld);

    SC_METHOD(thread_mux_4to1_ssdm_thread_M_proc_load_fu_66_p1);

    SC_METHOD(thread_out_r);
    sensitive << ( stg_11_mux_4to1_process_mux_fu_50_out_r );
    sensitive << ( stg_11_mux_4to1_process_mux_fu_50_out_r_ap_vld );

    SC_METHOD(thread_stg_11_mux_4to1_process_mux_fu_50_in0);
    sensitive << ( in0 );
    sensitive << ( mux_4to1_ssdm_thread_M_proc_load_fu_66_p1 );

    SC_METHOD(thread_stg_11_mux_4to1_process_mux_fu_50_in1);
    sensitive << ( in1 );
    sensitive << ( mux_4to1_ssdm_thread_M_proc_load_fu_66_p1 );

    SC_METHOD(thread_stg_11_mux_4to1_process_mux_fu_50_in2);
    sensitive << ( in2 );
    sensitive << ( mux_4to1_ssdm_thread_M_proc_load_fu_66_p1 );

    SC_METHOD(thread_stg_11_mux_4to1_process_mux_fu_50_in3);
    sensitive << ( in3 );
    sensitive << ( mux_4to1_ssdm_thread_M_proc_load_fu_66_p1 );

    SC_METHOD(thread_stg_11_mux_4to1_process_mux_fu_50_sel);
    sensitive << ( sel );
    sensitive << ( mux_4to1_ssdm_thread_M_proc_load_fu_66_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_sc_inter_clock.posedge_event() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mux_4to1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in0, "(port)in0");
    sc_trace(mVcdFile, in1, "(port)in1");
    sc_trace(mVcdFile, in2, "(port)in2");
    sc_trace(mVcdFile, in3, "(port)in3");
    sc_trace(mVcdFile, sel, "(port)sel");
    sc_trace(mVcdFile, out_r, "(port)out_r");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_in0, "stg_11_mux_4to1_process_mux_fu_50_in0");
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_in1, "stg_11_mux_4to1_process_mux_fu_50_in1");
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_in2, "stg_11_mux_4to1_process_mux_fu_50_in2");
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_in3, "stg_11_mux_4to1_process_mux_fu_50_in3");
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_sel, "stg_11_mux_4to1_process_mux_fu_50_sel");
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_out_r, "stg_11_mux_4to1_process_mux_fu_50_out_r");
    sc_trace(mVcdFile, stg_11_mux_4to1_process_mux_fu_50_out_r_ap_vld, "stg_11_mux_4to1_process_mux_fu_50_out_r_ap_vld");
    sc_trace(mVcdFile, mux_4to1_ssdm_thread_M_proc_load_fu_66_p1, "mux_4to1_ssdm_thread_M_proc_load_fu_66_p1");
#endif

    }
    mHdltvinHandle.open("mux_4to1.hdltvin.dat");
    mHdltvoutHandle.open("mux_4to1.hdltvout.dat");
}

mux_4to1::~mux_4to1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stg_11_mux_4to1_process_mux_fu_50;
}

void mux_4to1::thread_mux_4to1_ssdm_thread_M_proc_load_fu_66_p1() {
    mux_4to1_ssdm_thread_M_proc_load_fu_66_p1 = ap_const_lv1_0;
}

void mux_4to1::thread_out_r() {
    out_r = stg_11_mux_4to1_process_mux_fu_50_out_r.read();
}

void mux_4to1::thread_stg_11_mux_4to1_process_mux_fu_50_in0() {
    stg_11_mux_4to1_process_mux_fu_50_in0 = in0.read();
}

void mux_4to1::thread_stg_11_mux_4to1_process_mux_fu_50_in1() {
    stg_11_mux_4to1_process_mux_fu_50_in1 = in1.read();
}

void mux_4to1::thread_stg_11_mux_4to1_process_mux_fu_50_in2() {
    stg_11_mux_4to1_process_mux_fu_50_in2 = in2.read();
}

void mux_4to1::thread_stg_11_mux_4to1_process_mux_fu_50_in3() {
    stg_11_mux_4to1_process_mux_fu_50_in3 = in3.read();
}

void mux_4to1::thread_stg_11_mux_4to1_process_mux_fu_50_sel() {
    stg_11_mux_4to1_process_mux_fu_50_sel = sel.read();
}

void mux_4to1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"in0\" :  \"" << in0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1\" :  \"" << in1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2\" :  \"" << in2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in3\" :  \"" << in3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sel\" :  \"" << sel.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

